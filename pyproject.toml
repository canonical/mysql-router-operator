# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tool.poetry]
# Charm is not packed as a standard Python package; this information is not used
name = "charm"
version = "0.1.0"
description = ""
authors = []

[tool.poetry.dependencies]
python = "^3.8.1"  # ^3.8.1 required by flake8
# breaking change in ops 2.10.0: https://github.com/canonical/operator/pull/1091#issuecomment-1888644075
ops = "^2.9.0, <2.10"
tenacity = "^8.5.0"
poetry-core = "^1.9.0"
jinja2 = "^3.1.4"
requests = "^2.32.3"

[tool.poetry.group.charm-libs.dependencies]
# data_platform_libs/v0/data_interfaces.py
ops = ">=2.0.0"
# tls_certificates_interface/v2/tls_certificates.py
# tls_certificates lib v2 uses a feature only available in cryptography >=42.0.5
cryptography = ">=42.0.5"
jsonschema = "*"
# grafana_agent/v0/cos_agent.py
# tempo_coordinator_k8s/v/tracing.py supports both pydantic v1 and v2
pydantic = "<2"
cosl = "*"
# tempo_coordinator_k8s/v0/charm_tracing.py
opentelemetry-exporter-otlp-proto-http = "1.21.0"

[tool.poetry.group.format]
optional = true

[tool.poetry.group.format.dependencies]
ruff = "^0.4.5"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.4.5"
codespell = "^2.3.0"

[tool.poetry.group.unit.dependencies]
pytest = "^8.2.2"
pytest-xdist = "^3.6.1"
pytest-cov = "^5.0.0"
ops-scenario = "^6.0.3, <6.0.4"  # 6.0.4 requires ops >= 2.12
ops = "^2.9.0"
pytest-mock = "^3.14.0"

[tool.poetry.group.integration.dependencies]
pytest = "^8.2.2"
pytest-operator = "^0.35.0"
pytest-operator-cache = {git = "https://github.com/canonical/data-platform-workflows", tag = "v22.0.0", subdirectory = "python/pytest_plugins/pytest_operator_cache"}
pytest-operator-groups = {git = "https://github.com/canonical/data-platform-workflows", tag = "v22.0.0", subdirectory = "python/pytest_plugins/pytest_operator_groups"}
pytest-github-secrets = {git = "https://github.com/canonical/data-platform-workflows", tag = "v22.0.0", subdirectory = "python/pytest_plugins/github_secrets"}
juju = "^3.5.2.0"
mysql-connector-python = "~8.0.33"
tenacity = "^8.5.0"
ops = "^2.9.0"
pytest-mock = "^3.14.0"


[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
markers = ["unstable"]

# Formatting tools configuration
[tool.ruff]
# preview and explicit preview are enabled for CPY001
preview = true
target-version = "py38"
src = ["src", "."]
line-length = 99

[tool.ruff.lint]
explicit-preview-rules = true
select = ["A", "E", "W", "F", "C", "N", "D", "I", "CPY001"]
ignore = [
    # Missing docstring in public method (pydocstyle doesn't look for docstrings in super class
    # https://github.com/PyCQA/pydocstyle/issues/309) TODO: add pylint check? https://github.com/PyCQA/pydocstyle/issues/309#issuecomment-1284142716
    "D102",
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D403", # First word of the first line should be capitalized (false positive on "MySQL")
    "D415", # Docstring first line punctuation (doesn't make sense for properties)
    "E501", # Line too long (because using black creates errors with this)
    "N818", # Exception name should be named with an Error suffix
    "W505", # Doc line too long (so that strings in comments aren't split across lines)
]

[tool.ruff.lint.per-file-ignores]
# D100, D101, D102, D103: Ignore missing docstrings in tests
"tests/*" = ["D1"]

[tool.ruff.lint.flake8-copyright]
# Check for properly formatted copyright header in each file
author = "Canonical Ltd."
notice-rgx = "Copyright\\s\\d{4}([-,]\\d{4})*\\s+"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"
